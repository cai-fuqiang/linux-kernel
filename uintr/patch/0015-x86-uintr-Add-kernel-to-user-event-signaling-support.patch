From fed8dc12004260e2e236da811ed8908de0e16731 Mon Sep 17 00:00:00 2001
From: Sohil Mehta <sohil.mehta@intel.com>
Date: Thu, 8 Sep 2022 16:00:36 -0700
Subject: [PATCH 15/18] x86/uintr: Add kernel to user event signaling support

The kernel can use User Interrupts instead of eventfd or signals to
delivery event notifications in certain cases. Provide a in-kernel
mechanism to generate a User Interrupt for event signaling. For example,
we can deliver events such as IO_URING completions or external
interrupts as User Interrupts to applications.

Any kernel entity with access to uvec_fd would be able to generate a
User Interrupt in the receiver task with the vector associated with
uvec_fd.

On upcoming Sapphire Rapids silicon this would save some latency since
the receiver task won't need to block with the kernel to get these
events delivered. The savings are expected to come from waking up a task
from the wait queue and scheduling it back to ring 3.

Also with future hardware enhancements using the same user interface we
can deliver these interrupts directly to user applications without
entering the kernel.

Signed-off-by: Sohil Mehta <sohil.mehta@intel.com>
---
 arch/x86/include/asm/apic.h           |   4 +
 arch/x86/include/asm/uintr.h          |   8 ++
 arch/x86/kernel/apic/apic_flat_64.c   |   5 ++
 arch/x86/kernel/apic/apic_noop.c      |   2 +
 arch/x86/kernel/apic/apic_numachip.c  |   4 +
 arch/x86/kernel/apic/bigsmp_32.c      |   2 +
 arch/x86/kernel/apic/ipi.c            |  11 +++
 arch/x86/kernel/apic/local.h          |   3 +
 arch/x86/kernel/apic/x2apic_cluster.c |  14 +++
 arch/x86/kernel/apic/x2apic_phys.c    |  13 +++
 arch/x86/kernel/apic/x2apic_uv_x.c    |   2 +
 arch/x86/kernel/uintr.c               | 121 ++++++++++++++++++++++++++
 12 files changed, 189 insertions(+)

diff --git a/arch/x86/include/asm/apic.h b/arch/x86/include/asm/apic.h
index 3415321c8240..63c6843e7cec 100644
--- a/arch/x86/include/asm/apic.h
+++ b/arch/x86/include/asm/apic.h
@@ -295,6 +295,10 @@ struct apic {
 	void	(*send_IPI_all)(int vector);
 	void	(*send_IPI_self)(int vector);
 
+	/* User Interrupt specific function */
+	/* Check: Is ndst the right name? */
+	void	(*send_UINTR)(u32 ndst, int vector);
+
 	u32	disable_esr;
 
 	enum apic_delivery_modes delivery_mode;
diff --git a/arch/x86/include/asm/uintr.h b/arch/x86/include/asm/uintr.h
index 17a6ddaa58bd..d7b3ce46eb37 100644
--- a/arch/x86/include/asm/uintr.h
+++ b/arch/x86/include/asm/uintr.h
@@ -81,6 +81,10 @@ void uintr_wake_up_process(void);
 bool is_uintr_receiver(struct task_struct *t);
 bool is_uintr_ongoing(struct task_struct *t);
 
+/* UINTR kernel notification related functions */
+struct file *uvecfd_fget(int uvec_fd);
+int uintr_notify(struct file *uvec_f);
+
 /* TODO: Inline the context switch related functions */
 void switch_uintr_prepare(struct task_struct *prev);
 void switch_uintr_return(void);
@@ -95,6 +99,10 @@ static inline void uintr_destroy_uitt_ctx(struct mm_struct *mm) {}
 static inline bool is_uintr_receiver(struct task_struct *t) { return false; }
 static inline bool is_uintr_ongoing(struct task_struct *t) { return false; }
 
+/* EXPORT_SYMBOL functions */
+static inline int uintr_notify(struct file *uvec_f) { return -EINVAL; }
+static inline struct file *uvecfd_fget(int uvec_fd) { return ERR_PTR(-EINVAL); }
+
 static inline void switch_uintr_prepare(struct task_struct *prev) {}
 static inline void switch_uintr_return(void) {}
 static inline void switch_uintr_finish(struct task_struct *next) {}
diff --git a/arch/x86/kernel/apic/apic_flat_64.c b/arch/x86/kernel/apic/apic_flat_64.c
index 8f72b4351c9f..09994da99933 100644
--- a/arch/x86/kernel/apic/apic_flat_64.c
+++ b/arch/x86/kernel/apic/apic_flat_64.c
@@ -139,6 +139,9 @@ static struct apic apic_flat __ro_after_init = {
 	.send_IPI_all			= default_send_IPI_all,
 	.send_IPI_self			= default_send_IPI_self,
 
+	/* Check: If phys mode can be used even if apic is in flat mode? */
+	.send_UINTR			= default_send_UINTR_single_phys,
+
 	.inquire_remote_apic		= default_inquire_remote_apic,
 
 	.read				= native_apic_mem_read,
@@ -230,6 +233,8 @@ static struct apic apic_physflat __ro_after_init = {
 	.send_IPI_all			= default_send_IPI_all,
 	.send_IPI_self			= default_send_IPI_self,
 
+	.send_UINTR			= default_send_UINTR_single_phys,
+
 	.inquire_remote_apic		= default_inquire_remote_apic,
 
 	.read				= native_apic_mem_read,
diff --git a/arch/x86/kernel/apic/apic_noop.c b/arch/x86/kernel/apic/apic_noop.c
index fe78319e0f7a..3b9f5aa46fa4 100644
--- a/arch/x86/kernel/apic/apic_noop.c
+++ b/arch/x86/kernel/apic/apic_noop.c
@@ -123,6 +123,8 @@ struct apic apic_noop __ro_after_init = {
 	.send_IPI_all			= noop_send_IPI_all,
 	.send_IPI_self			= noop_send_IPI_self,
 
+	.send_UINTR			= NULL,
+
 	.wakeup_secondary_cpu		= noop_wakeup_secondary_cpu,
 
 	.inquire_remote_apic		= NULL,
diff --git a/arch/x86/kernel/apic/apic_numachip.c b/arch/x86/kernel/apic/apic_numachip.c
index a54d817eb4b6..da11e6bd963f 100644
--- a/arch/x86/kernel/apic/apic_numachip.c
+++ b/arch/x86/kernel/apic/apic_numachip.c
@@ -272,6 +272,8 @@ static const struct apic apic_numachip1 __refconst = {
 	.send_IPI_all			= numachip_send_IPI_all,
 	.send_IPI_self			= numachip_send_IPI_self,
 
+	.send_UINTR			= NULL,
+
 	.wakeup_secondary_cpu		= numachip_wakeup_secondary,
 	.inquire_remote_apic		= NULL, /* REMRD not supported */
 
@@ -319,6 +321,8 @@ static const struct apic apic_numachip2 __refconst = {
 	.send_IPI_all			= numachip_send_IPI_all,
 	.send_IPI_self			= numachip_send_IPI_self,
 
+	.send_UINTR			= NULL,
+
 	.wakeup_secondary_cpu		= numachip_wakeup_secondary,
 	.inquire_remote_apic		= NULL, /* REMRD not supported */
 
diff --git a/arch/x86/kernel/apic/bigsmp_32.c b/arch/x86/kernel/apic/bigsmp_32.c
index 77555f66c14d..3d73962ffb6d 100644
--- a/arch/x86/kernel/apic/bigsmp_32.c
+++ b/arch/x86/kernel/apic/bigsmp_32.c
@@ -153,6 +153,8 @@ static struct apic apic_bigsmp __ro_after_init = {
 	.send_IPI_all			= bigsmp_send_IPI_all,
 	.send_IPI_self			= default_send_IPI_self,
 
+	.send_UINTR			= NULL,
+
 	.inquire_remote_apic		= default_inquire_remote_apic,
 
 	.read				= native_apic_mem_read,
diff --git a/arch/x86/kernel/apic/ipi.c b/arch/x86/kernel/apic/ipi.c
index 2a6509e8c840..923cafde7ec5 100644
--- a/arch/x86/kernel/apic/ipi.c
+++ b/arch/x86/kernel/apic/ipi.c
@@ -172,6 +172,17 @@ void __default_send_IPI_dest_field(unsigned int mask, int vector, unsigned int d
 	native_apic_mem_write(APIC_ICR, cfg);
 }
 
+void default_send_UINTR_single_phys(u32 ndst, int vector)
+{
+	/* Check: Dest calculation in xapic mode? */
+	unsigned int dest = (ndst >> 8) & 0xFF;
+	unsigned long flags;
+
+	local_irq_save(flags);
+	__default_send_IPI_dest_field(dest, vector, APIC_DEST_PHYSICAL);
+	local_irq_restore(flags);
+}
+
 void default_send_IPI_single_phys(int cpu, int vector)
 {
 	unsigned long flags;
diff --git a/arch/x86/kernel/apic/local.h b/arch/x86/kernel/apic/local.h
index a997d849509a..38347bce0fb6 100644
--- a/arch/x86/kernel/apic/local.h
+++ b/arch/x86/kernel/apic/local.h
@@ -26,6 +26,9 @@ int x2apic_phys_pkg_id(int initial_apicid, int index_msb);
 void x2apic_send_IPI_self(int vector);
 void __x2apic_send_IPI_shorthand(int vector, u32 which);
 
+/* UINTR */
+void default_send_UINTR_single_phys(u32 ndst, int vector);
+
 /* IPI */
 
 DECLARE_STATIC_KEY_FALSE(apic_use_ipi_shorthand);
diff --git a/arch/x86/kernel/apic/x2apic_cluster.c b/arch/x86/kernel/apic/x2apic_cluster.c
index e696e22d0531..3bfad95dd2b2 100644
--- a/arch/x86/kernel/apic/x2apic_cluster.c
+++ b/arch/x86/kernel/apic/x2apic_cluster.c
@@ -31,6 +31,17 @@ static int x2apic_acpi_madt_oem_check(char *oem_id, char *oem_table_id)
 	return x2apic_enabled();
 }
 
+static void x2apic_send_UINTR(u32 ndst, int vector)
+{
+	u32 dest = ndst;
+
+	/* x2apic MSRs are special and need a special fence: */
+	weak_wrmsr_fence();
+
+	/* Check: Is this expected to be physical? */
+	__x2apic_send_IPI_dest(dest, vector, APIC_DEST_PHYSICAL);
+}
+
 static void x2apic_send_IPI(int cpu, int vector)
 {
 	u32 dest = x86_cpu_to_logical_apicid[cpu];
@@ -227,6 +238,9 @@ static struct apic apic_x2apic_cluster __ro_after_init = {
 	.send_IPI_all			= x2apic_send_IPI_all,
 	.send_IPI_self			= x2apic_send_IPI_self,
 
+	/* Check: If phys mode can be used even if apic is in flat mode? */
+	.send_UINTR			= x2apic_send_UINTR,
+
 	.inquire_remote_apic		= NULL,
 
 	.read				= native_apic_msr_read,
diff --git a/arch/x86/kernel/apic/x2apic_phys.c b/arch/x86/kernel/apic/x2apic_phys.c
index 6bde05a86b4e..72a6a801ec54 100644
--- a/arch/x86/kernel/apic/x2apic_phys.c
+++ b/arch/x86/kernel/apic/x2apic_phys.c
@@ -39,6 +39,17 @@ static int x2apic_acpi_madt_oem_check(char *oem_id, char *oem_table_id)
 	return x2apic_enabled() && (x2apic_phys || x2apic_fadt_phys());
 }
 
+static void x2apic_send_UINTR(u32 ndst, int vector)
+{
+	u32 dest = ndst;
+
+	/* x2apic MSRs are special and need a special fence: */
+	weak_wrmsr_fence();
+
+	/* Check: Does this need local_irq_save/restore? */
+	__x2apic_send_IPI_dest(dest, vector, APIC_DEST_PHYSICAL);
+}
+
 static void x2apic_send_IPI(int cpu, int vector)
 {
 	u32 dest = per_cpu(x86_cpu_to_apicid, cpu);
@@ -186,6 +197,8 @@ static struct apic apic_x2apic_phys __ro_after_init = {
 	.send_IPI_all			= x2apic_send_IPI_all,
 	.send_IPI_self			= x2apic_send_IPI_self,
 
+	.send_UINTR			= x2apic_send_UINTR,
+
 	.inquire_remote_apic		= NULL,
 
 	.read				= native_apic_msr_read,
diff --git a/arch/x86/kernel/apic/x2apic_uv_x.c b/arch/x86/kernel/apic/x2apic_uv_x.c
index 482855227964..0bc15ac48400 100644
--- a/arch/x86/kernel/apic/x2apic_uv_x.c
+++ b/arch/x86/kernel/apic/x2apic_uv_x.c
@@ -860,6 +860,8 @@ static struct apic apic_x2apic_uv_x __ro_after_init = {
 	.send_IPI_all			= uv_send_IPI_all,
 	.send_IPI_self			= uv_send_IPI_self,
 
+	.send_UINTR			= NULL,
+
 	.wakeup_secondary_cpu		= uv_wakeup_secondary,
 	.inquire_remote_apic		= NULL,
 
diff --git a/arch/x86/kernel/uintr.c b/arch/x86/kernel/uintr.c
index 20a800b142bf..ecef63974f68 100644
--- a/arch/x86/kernel/uintr.c
+++ b/arch/x86/kernel/uintr.c
@@ -1112,6 +1112,127 @@ SYSCALL_DEFINE3(uintr_alt_stack, void __user *, sp, size_t, size, unsigned int,
 	return ret;
 }
 
+#if 0
+/* For notify receiver */
+/* TODO: Find a more efficient way rather than iterating over each cpu */
+static int convert_apicid_to_cpu(int apic_id)
+{
+	int i;
+
+	for_each_possible_cpu(i) {
+		if (per_cpu(x86_cpu_to_apicid, i) == apic_id)
+			return i;
+	}
+	return -1;
+}
+
+static inline int ndst_to_cpu(u32 ndst)
+{
+	int apic_id;
+	int cpu;
+
+	if (!x2apic_enabled())
+		apic_id = (ndst >> 8) & 0xFF;
+	else
+		apic_id = ndst;
+
+	cpu = convert_apicid_to_cpu(apic_id);
+
+	WARN_ON_ONCE(cpu == -1);
+
+	pr_debug("uintr: converted ndst %x to cpu %d\n", ndst, cpu);
+	return cpu;
+}
+#endif
+
+static int uintr_notify_receiver(u64 uvec, struct uintr_upid_ctx *upid_ctx)
+{
+	//struct uintr_upid_ctx *upid_ctx = upid_ctx;
+	struct uintr_upid *upid = upid_ctx->upid;
+
+	set_bit((unsigned long)uvec, (unsigned long *)&upid->puir);
+
+	pr_debug("notify: Posted vector %llu to task %d\n",
+		 uvec, upid_ctx->task->pid);
+
+	pr_debug("notify: puir=%llx SN %x ON %x NDST %x NV %x",
+		 upid->puir, test_bit(UINTR_UPID_STATUS_SN, (unsigned long *)&upid->nc.status),
+		 test_bit(UINTR_UPID_STATUS_ON, (unsigned long *)&upid->nc.status),
+		 upid->nc.ndst, upid->nc.nv);
+
+	/* TODO: Use cmpxchg for UPID since we are doing read-modify-write */
+	if (!test_bit(UINTR_UPID_STATUS_SN, (unsigned long *)&upid->nc.status) &&
+	    !test_and_set_bit(UINTR_UPID_STATUS_ON, (unsigned long *)&upid->nc.status)) {
+
+		pr_debug("notify: Sending IPI to NDST %x with NV %x\n",
+			 upid->nc.ndst, upid->nc.nv);
+
+		/*
+		 * Confirm: Which method is more efficient?
+		 *	1. Directly program the APIC as done below
+		 *	2. Convert ndst to cpu and then use send_IPI()
+		 */
+		apic->send_UINTR(upid->nc.ndst, upid->nc.nv);
+
+	} else {
+		pr_debug("notify: Skip sending IPI to task %d\n",
+			 upid_ctx->task->pid);
+	}
+
+	return 0;
+}
+
+/**
+ * uintr_notify - Notify a user interrupt receiver.
+ * @uvec_f: [in] File pertaining to the uvec_fd.
+ *
+ * Returns <tbd>
+ */
+int uintr_notify(struct file *uvec_f)
+{
+	struct uvecfd_ctx *uvecfd_ctx;
+
+	if (!cpu_feature_enabled(X86_FEATURE_UINTR))
+		return -EINVAL;
+
+	if (uvec_f->f_op != &uvecfd_fops)
+		return -EINVAL;
+
+	uvecfd_ctx = (struct uvecfd_ctx *)uvec_f->private_data;
+
+	return uintr_notify_receiver(uvecfd_ctx->uvec, uvecfd_ctx->upid_ctx);
+}
+EXPORT_SYMBOL_GPL(uintr_notify);
+
+/**
+ * uvecfd_fget - Acquire a reference of an uvecfd file descriptor.
+ * @fd: [in] uvecfd file descriptor.
+ *
+ * Returns a pointer to the uvecfd file structure in case of success, or the
+ * following error pointer:
+ *
+ * -EBADF    : Invalid @fd file descriptor.
+ * -EINVAL   : The @fd file descriptor is not an uvecfd file.
+ */
+struct file *uvecfd_fget(int fd)
+{
+	struct file *file;
+
+	if (!cpu_feature_enabled(X86_FEATURE_UINTR))
+		return ERR_PTR(-EINVAL);
+
+	file = fget(fd);
+	if (!file)
+		return ERR_PTR(-EBADF);
+	if (file->f_op != &uvecfd_fops) {
+		fput(file);
+		return ERR_PTR(-EINVAL);
+	}
+
+	return file;
+}
+EXPORT_SYMBOL_GPL(uvecfd_fget);
+
 static int uintr_receiver_wait(ktime_t *expires)
 {
 	struct task_struct *tsk = current;
-- 
2.39.0

